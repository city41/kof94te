{
  "description": "Go to new routine after HTP instead of team select",
  "subroutineSpace": {
    "start": "97000",
    "end": "bfff0"
  },
  "symbols": {
    "ROM_CONTINUE_POSITION_TABLE": "45448",
    "BIOS_PLAYER_MOD1": "10fdb6",
    "BIOS_PLAYER_MOD2": "10fdb7",
    "BIOS_P1CHANGE": "10fd97",
    "BIOS_P2CHANGE": "10fd9d",
    "PALETTE_WHITE": "7fff",
    "PALETTE_BLACK": "8000",
    "CPU_RANDOM_SELECT_COUNTER_FOR_P1": "1083d3",
    "CPU_RANDOM_SELECT_COUNTER_FOR_P2": "1081d3",
    "P1_CHOSEN_CHARS_IN_ORDER_OF_FIGHTING": "108232",
    "P1_CHOSEN_CHARS_IN_ORDER_OF_CHOOSING": "108235",
    "P2_CHOSEN_CHARS_IN_ORDER_OF_FIGHTING": "108432",
    "P2_CHOSEN_CHARS_IN_ORDER_OF_CHOOSING": "108435",
    "WINNING_TEAM_LIST": "10f7c0",
    "VSTRING_DATA": "10f7d0",
    "FIX_STRING_DATA": "10f7e0",
    "MORE_STRING_DATA": "10f7f0",
    "NUM_PLAYER_MODE": "10f7fc",
    "SINGLE_PLAYER_PAST_FIRST_FIGHT": "10f7fe",
    "P1_CUR_INPUT": "10f800",
    "P1_CURSOR_X": "10f802",
    "P1_CURSOR_Y": "10f804",
    "P1_CHOSEN_CHAR0": "10f806",
    "P1_CHOSEN_CHAR1": "10f808",
    "P1_CHOSEN_CHAR2": "10f80a",
    "P1_NUM_CHOSEN_CHARS": "10f80c",
    "P1_FOCUSED_CHAR_NAME_FIX_ADDRESS": "10f80e",
    "P1_CHAR_NAME_TABLE_ADDRESS": "10f810",
    "P1_CHOSEN_TEAM_SCREEN_X": "10f814",
    "P1CTSX_MULTIPLIER": "10f816",
    "P2_CUR_INPUT": "10f8a0",
    "P2_CURSOR_X": "10f8a2",
    "P2_CURSOR_Y": "10f8a4",
    "P2_CHOSEN_CHAR0": "10f8aa",
    "P2_CHOSEN_CHAR1": "10f8a8",
    "P2_CHOSEN_CHAR2": "10f8a6",
    "P2_NUM_CHOSEN_CHARS": "10f8ac",
    "P2_FOCUSED_CHAR_NAME_FIX_ADDRESS": "10f8ae",
    "P2_CHAR_NAME_TABLE_ADDRESS": "10f8b0",
    "P2_CHOSEN_TEAM_SCREEN_X": "10f8b4",
    "P2CTSX_MULTIPLIER": "10f8b6",
    "READY_TO_EXIT_CHAR_SELECT": "10f8e0",
    "AFTER_CHAR_SELECT_FLAG": "10f8e1",
    "SET_CHAR_COLORS_COUNTER": "10f8e2",
    "IN_CHAR_SELECT_FLAG": "10f8e4",
    "STORE_A0A1A2": "10f8e6",
    "MOVEM_STORAGE": "10f8f2",
    "AFTER_SCREEN_POSITION_TABLE": "10f910",
    "WIN_SCREEN_ALREADY_SET_LEFT": "10f912",
    "GRID_IMAGE_SI": "15b",
    "P1_CURSOR_SI": "16d",
    "P2_CURSOR_SI": "16f",
    "P1C1_SI": "171",
    "P2C1_SI": "177",
    "PX_CUR_INPUT_OFFSET": "0",
    "PX_CURSOR_X_OFFSET": "2",
    "PX_CURSOR_Y_OFFSET": "4",
    "PX_CHOSEN_CHAR0_OFFSET": "6",
    "PX_CHOSEN_CHAR1_OFFSET": "8",
    "PX_CHOSEN_CHAR2_OFFSET": "a",
    "PX_NUM_CHOSEN_CHARS_OFFSET": "c",
    "PX_FOCUSED_CHAR_NAME_FIX_ADDRESS_OFFSET": "e",
    "PX_CHAR_NAME_TABLE_ADDRESS": "10",
    "PX_CHOSEN_TEAM_SCREEN_X_OFFSET": "14",
    "PXCTSX_MULTIPLIER_OFFSET": "16",
    "P1_FOCUSED_NAME_FIX_ADDRESS_VALUE": "7056",
    "P2_FOCUSED_NAME_FIX_ADDRESS_VALUE": "72f6"
  },
  "patches": [
    {
      "type": "prom",
      "string": true,
      "value": "     Hack isn't finished yet          ",
      "symbol": "HACK_ISNT_FINISHED_YET"
    },
    {
      "type": "prom",
      "string": true,
      "value": "     More info: neorh.mattgreer.dev   ",
      "symbol": "MORE_INFO"
    },
    {
      "type": "prom",
      "description": "general string to fix layer routine",
      "subroutine": true,
      "symbol": "STRING_TO_FIX_LAYER_ROUTINE",
      "patchAsm": "stringToFixLayer.asm"
    },
    {
      "type": "prom",
      "description": "clean up straggling word",
      "address": "13260e",
      "patchAsm": ["nop"]
    },
    {
      "type": "prom",
      "string": true,
      "value": "HEIDERN        RALF           CLARK          ATHENA ASAMIYA SIE KENSOU     CHIN GENTSAI   KYO KUSANAGI   BENIMARU N.    GORO DAIMON    HEAVY D!       LUCKY GLAUBER  BRIAN BATTLER  KIM KAPHWAN    CHANG KOEHAN   CHOI BOUNGE    TERRY BOGARD   ANDY BOGARD    JOE HIGASHI    RYO SAKAZAKI   ROBERT GARCIA  TAKUMA SAKAZAKIYURI SAKAZAKI  MAI SHIRANUI   KING           ",
      "symbol": "P1_CHAR_NAME_TABLE"
    },
    {
      "type": "prom",
      "string": true,
      "value": "        HEIDERN           RALF          CLARK ATHENA ASAMIYA     SIE KENSOU   CHIN GENTSAI   KYO KUSANAGI    BENIMARU N.    GORO DAIMON       HEAVY D!  LUCKY GLAUBER  BRIAN BATTLER    KIM KAPHWAN   CHANG KOEHAN    CHOI BOUNGE   TERRY BOGARD    ANDY BOGARD    JOE HIGASHI   RYO SAKAZAKI  ROBERT GARCIATAKUMA SAKAZAKI  YURI SAKAZAKI   MAI SHIRANUI           KING",
      "symbol": "P2_CHAR_NAME_TABLE"
    },
    {
      "type": "prom",
      "description": "position in grid to character id map",
      "subroutine": true,
      "symbol": "GRID_TO_CHARACTER_ID",
      "patchAsm": "positionInGridToCharacterId.asm"
    },
    {
      "type": "prom",
      "description": "palettes",
      "subroutine": true,
      "symbol": "PALETTES",
      "patchAsm": "palettes.asm"
    },
    {
      "type": "prom",
      "description": "character_grid image",
      "subroutine": true,
      "symbol": "CHARACTER_GRID_IMAGE",
      "patchAsm": "character_grid.asm"
    },
    {
      "type": "prom",
      "description": "avatars image",
      "subroutine": true,
      "symbol": "AVATARS_IMAGE",
      "patchAsm": "avatars.asm"
    },
    {
      "type": "prom",
      "description": "p1 cursor, image",
      "subroutine": true,
      "symbol": "P1_CURSOR_IMAGE",
      "patchAsm": "p1_cursor.asm"
    },
    {
      "type": "prom",
      "description": "p2 cursor, image",
      "subroutine": true,
      "symbol": "P2_CURSOR_IMAGE",
      "patchAsm": "p2_cursor.asm"
    },
    {
      "type": "prom",
      "description": "cpu cursor, left, image",
      "subroutine": true,
      "symbol": "CPU_CURSOR_LEFT_IMAGE",
      "patchAsm": "cpu_cursor_left.asm"
    },
    {
      "type": "prom",
      "description": "cpu cursor, right, image",
      "subroutine": true,
      "symbol": "CPU_CURSOR_RIGHT_IMAGE",
      "patchAsm": "cpu_cursor_right.asm"
    },
    {
      "type": "prom",
      "description": "load palettes routine",
      "subroutine": true,
      "symbol": "LOAD_P_A_L_E_T_T_E_S",
      "patchAsm": "loadPalettes.asm"
    },
    {
      "type": "prom",
      "description": "render static image routine",
      "subroutine": true,
      "symbol": "RENDER_STATIC_IMAGE",
      "patchAsm": "renderStaticImage.asm"
    },
    {
      "type": "prom",
      "description": "move sprite routine",
      "subroutine": true,
      "symbol": "MOVE_SPRITE",
      "patchAsm": "moveSprite.asm"
    },
    {
      "type": "prom",
      "description": "map from team index on OG team select to XY for cpu cursor",
      "subroutine": true,
      "symbol": "TEAM_INDEX_TO_XY",
      "patchAsm": "teamSelectIndexToXY.asm"
    },
    {
      "type": "prom",
      "description": "move cpu cursor routine",
      "subroutine": true,
      "symbol": "MOVE_CPU_CURSOR",
      "patchAsm": "moveCpuCursor.asm"
    },
    {
      "type": "prom",
      "description": "move cursor routine",
      "subroutine": true,
      "symbol": "MOVE_CURSOR",
      "patchAsm": "moveCursor.asm"
    },
    {
      "type": "prom",
      "description": "render currently focused character name",
      "subroutine": true,
      "symbol": "RENDER_CUR_FOCUSED_CHAR_NAME",
      "patchAsm": "renderCurFocusedCharName.asm"
    },
    {
      "type": "prom",
      "description": "truncate sprites routine",
      "subroutine": true,
      "symbol": "TRUNCATE_SPRITES_ROUTINE",
      "patchAsm": "truncateSpritesRoutine.asm"
    },
    {
      "type": "prom",
      "description": "clear p1 and p2 focused char names",
      "subroutine": true,
      "symbol": "CLEAR_FOCUSED_NAMES_FROM_FIX_ROUTINE",
      "patchAsm": "clearFocusedNamesFromFix.asm"
    },
    {
      "type": "prom",
      "description": "teardown routine",
      "subroutine": true,
      "symbol": "CHAR_SELECT_TEARDOWN_ROUTINE",
      "patchAsm": "charSelectTeardownRoutine.asm"
    },
    {
      "type": "prom",
      "description": "player routine",
      "subroutine": true,
      "symbol": "CHAR_SELECT_PLAYER_ROUTINE",
      "patchAsm": "charSelectPlayerRoutine.asm"
    },
    {
      "type": "prom",
      "description": "main routine",
      "subroutine": true,
      "symbol": "CHAR_SELECT_MAIN_ROUTINE",
      "patchAsm": "charSelectMainRoutine.asm"
    },
    {
      "type": "prom",
      "description": "init routine",
      "subroutine": true,
      "symbol": "CHAR_SELECT_INIT_ROUTINE",
      "patchAsm": "charSelectInitRoutine.asm"
    },
    {
      "type": "prom",
      "descrition": "jump to char init after team init is done",
      "address": "13703c",
      "subroutine": true,
      "patchAsm": [
        "jsr $2CHAR_SELECT_INIT_ROUTINE",
        "move.l #$37046, $108584",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "clean up straggling word",
      "address": "137042",
      "patchAsm": ["nop"]
    },
    {
      "type": "prom",
      "description": "skip the sprite clearing block",
      "address": "13369c",
      "subroutine": true,
      "patchAsm": [
        ";;; restore what was clobbered",
        "lea $336a6, A2",
        "adda.w D1, A2",
        ";;; end restore what was clobbered",
        "move.b $IN_CHAR_SELECT_FLAG, D5",
        "cmpi.b #1, D5",
        "bne done",
        "lea $337a6, A2 ; skip all sprite clears",
        "done:",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "remove adda as it is now in the subroutine",
      "address": "1336a2",
      "patchAsm": ["nop"]
    },
    {
      "type": "prom",
      "description": "skip the sprite clearing block",
      "address": "1337cc",
      "subroutine": true,
      "patchAsm": [
        ";;; restore what was clobbered",
        "lea $337d6, A2",
        "adda.w D1, A2",
        ";;; end restore what was clobbered",
        "move.b $IN_CHAR_SELECT_FLAG, D5",
        "cmpi.b #1, D5",
        "bne done",
        "lea $338d6, A2 ; skip all sprite clears",
        "done:",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "remove adda as it is now in the subroutine",
      "address": "1337d2",
      "patchAsm": ["nop"]
    },
    {
      "type": "prom",
      "description": "skip the sprite clearing block",
      "address": "133a28",
      "subroutine": true,
      "patchAsm": [
        ";;; restore what was clobbered",
        "lea $33a32, A0",
        "adda.w D2, A0",
        ";;; end restore what was clobbered",
        "move.b $IN_CHAR_SELECT_FLAG, D5",
        "cmpi.b #1, D5",
        "bne done",
        "lea $33b32, A0 ; skip all sprite clears",
        "done:",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "remove adda as it is now in the subroutine",
      "address": "133a2e",
      "patchAsm": ["nop"]
    },
    {
      "skip": true,
      "type": "prom",
      "description": "skip team select counter decrement",
      "address": "13705a",
      "patchAsm": ["subq.b #0, $655(a5)"]
    },
    {
      "type": "prom",
      "description": "Run char select soon after vblank ack",
      "address": "132be4",
      "subroutine": true,
      "patchAsm": [
        "move.b $IN_CHAR_SELECT_FLAG, D5",
        "cmpi.b #1, D5",
        "bne skipCharSelectMain",

        "jsr $2CHAR_SELECT_MAIN_ROUTINE",
        ";;; now put fix strings onto the screen",
        "movem.l A5/A6,$STORE_A0A1A2",
        "lea $VSTRING_DATA, A6",
        "jsr $2STRING_TO_FIX_LAYER_ROUTINE",
        "lea $FIX_STRING_DATA, A6",
        "jsr $2STRING_TO_FIX_LAYER_ROUTINE",
        "lea $MORE_STRING_DATA, A6",
        "jsr $2STRING_TO_FIX_LAYER_ROUTINE",
        "movem.l $STORE_A0A1A2, A5/A6",

        "skipCharSelectMain:",
        ";;; restore what got clobbered",
        "jsr $6536",
        ";;; end replace",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "have the game leave our palettes alone",
      "address": "133642",
      "subroutine": true,
      "patchAsm": [
        "move.b $IN_CHAR_SELECT_FLAG, D5",
        "cmpi.b #1, D5",
        "bne skip ; not in char select? nothing to do",
        "cmpi.w #15, D0",
        "ble skip ; not touching one of our palettes? nothing to do",
        "cmpi.w #78, D0",
        "bge skip ; not touching one of our palettes? nothing to do",
        "move.w #78, D0  ; have it write into palette 78",
        "skip:",
        "lea $400000, A1",
        "done:",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "Check for exit after team select",
      "address": "137074",
      "subroutine": true,
      "patchAsm": [
        ";;; restore what got clobbered",
        "move.b #$3c, $655(A5)",
        ";;; end restore",
        ";;; on single player fights past 1, 1086a4 is non-zero",
        ";;; not sure why yet. but if it is non-zero, we are in a subsequent char select",
        ";;; where the player should just be locked out and waiting for the cpu, and so",
        ";;; we dont want to do anything here",
        ";;; TODO: understand this more",
        "move.w $1086a4, D5",
        "bne done",
        "move.b $READY_TO_EXIT_CHAR_SELECT, D5",
        "cmpi.b #1, D5",
        "bne notReadyYet",
        "move.w #$1, $108654 ; empty the timer so game naturally exits",
        "bra done",
        "notReadyYet:",
        "move.b #$14, $108654 ; reload the timer so we dont exit",
        "done:",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "run teardown just before going to order select",
      "address": "137116",
      "subroutine": true,
      "patchAsm": [
        ";;; restore what was clobbered",
        "move.l #$37eb2, $584(A5)",
        ";;; end restore",
        "jsr $2CHAR_SELECT_TEARDOWN_ROUTINE",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "clean up straggling word",
      "address": "13711c",
      "patchAsm": ["nop"]
    },
    {
      "type": "prom",
      "description": "set chosen team in membdisp",
      "address": "1379d2",
      "subroutine": true,
      "patchAsm": [
        ";;; dont set member disp if in char select, it can cause",
        ";;; sprite corruption with Changs, and it is not needed to boot",
        "move.b $IN_CHAR_SELECT_FLAG, D7",
        "bne done",
        "btst #0, $NUM_PLAYER_MODE ; is p1 playing?",
        "beq skipPlayer1",
        "move.l A4, D7",
        "cmpi.l #$102900, D7",
        "bne p1_skipChar0",
        "move.b $P1_CHOSEN_CHAR0, D6",
        "move.b D6, $71(A4)",
        "bra done",
        "p1_skipChar0:",
        "cmpi.l #$102B00, D7",
        "bne p1_skipChar1",
        "move.b $P1_CHOSEN_CHAR1, D6",
        "move.b D6, $71(A4)",
        "bra done",
        "p1_skipChar1:",
        "cmpi.l #$102D00, D7",
        "bne p1_skipChar2",
        "move.b $P1_CHOSEN_CHAR2, D6",
        "move.b D6, $71(A4)",
        "bra done",
        "p1_skipChar2:",
        ";;;; this must be player 2, ie cpu",
        "move.b (A2,D0.w), $71(A4)",

        "skipPlayer1:",
        "btst #1, $NUM_PLAYER_MODE ; is p2 playing?",
        "beq skipPlayer2",
        "move.l A4, D7",
        "cmpi.l #$102F00, D7",
        "bne p2_skipChar0",
        "move.b $P2_CHOSEN_CHAR0, D6",
        "move.b D6, $71(A4)",
        "bra done",
        "p2_skipChar0:",
        "cmpi.l #$103100, D7",
        "bne p2_skipChar1",
        "move.b $P2_CHOSEN_CHAR1, D6",
        "move.b D6, $71(A4)",
        "bra done",
        "p2_skipChar1:",
        "cmpi.l #$103300, D7",
        "bne p2_skipChar2",
        "move.b $P2_CHOSEN_CHAR2, D6",
        "move.b D6, $71(A4)",
        "bra done",

        "p2_skipChar2:",
        ";;;; this must be player 1, ie cpu",
        "move.b (A2,D0.w), $71(A4)",

        "skipPlayer2:",
        "done:",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "prevent A in team select, let the game continue once cpu random select is done",
      "address": "137466",
      "subroutine": true,
      "patchAsm": [
        ";;; first we are only ready if char select has finished",
        "move.b $READY_TO_EXIT_CHAR_SELECT, D5",
        "cmpi.b #1, D5",
        "beq checkForCpuDone ; char select has finished, now go see if cpu has finished",
        "cmp.b D0, D0 ; char select isn't done, force a zero result so the game doesn't move on",
        "bra done",
        "checkForCpuDone:",
        "cmpi.b #3, $NUM_PLAYER_MODE ; is this versus mode?",
        "beq cpuIsDone ; it is versus mode, no need to wait for cpu",
        "btst #0, $NUM_PLAYER_MODE ; is p1 playing?",
        "beq skipPlayer1",
        "move.b $CPU_RANDOM_SELECT_COUNTER_FOR_P1, D0 ; load the cpu random countdown",
        "bra checkIfCpuIsDone",
        "skipPlayer1:",
        "move.b $CPU_RANDOM_SELECT_COUNTER_FOR_P2, D0 ; load the cpu random countdown",
        "checkIfCpuIsDone:",
        "cmpi.b #$ff, D0 ; if it goes from 0 -> -1, then cpu is done random selecting",
        "beq cpuIsDone",
        "cmp.b D0, D0 ; cpu is not done yet, force a zero result so game doesn't move on",
        "bra done",
        "cpuIsDone:",
        "cmpi.b #0, D0 ; cpu is done, force a non-zero result so game does move on",
        "done:",
        "rts"
      ]
    },
    {
      "type": "prom",
      "description": "clean up straggling word",
      "address": "13746c",
      "patchAsm": ["nop"]
    },
    {
      "type": "prom",
      "description": "Have game use our dynamic x position table for win screen instead of the canned rom one",
      "address": "13fda6",
      "patchAsm": ["move.l #$AFTER_SCREEN_POSITION_TABLE, $506a(A5)"]
    },
    {
      "type": "prom",
      "subroutine": true,
      "symbol": "WIN_SCREEN_TABLES",
      "patchAsm": "winScreenTables.asm"
    },
    {
      "type": "prom",
      "description": "Set up win screen based on custom team",
      "address": "13fd40",
      "subroutine": true,
      "symbol": "WINNER_SCREEN_INIT",
      "patchAsm": "winScreenInit.asm"
    },
    {
      "type": "prom",
      "description": "Have game use our dynamic x position table for continue screen instead of the canned rom one",
      "address": "145422",
      "patchAsm": ["lea $AFTER_SCREEN_POSITION_TABLE, A0"]
    },
    {
      "type": "prom",
      "description": "Load the actual losing characters into the continue screen",
      "address": "145da8",
      "subroutine": true,
      "patchAsm": "continueScreenInit.asm"
    },
    {
      "skip": true,
      "type": "prom",
      "description": "Set up character colors (reg or alt, ie mirror match)",
      "address": "1032f0",
      "subroutine": true,
      "symbol": "SETUP_CHARACTER_COLORS",
      "patchAsm": "setupCharacterColors.asm"
    }
  ]
}
